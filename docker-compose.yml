services:
  planka:
    build:
      context: .
      dockerfile: Dockerfile
    image: planka-producao-desenvolvimento
    pull_policy: never
    restart: on-failure
    volumes:
      - favicons:/app/public/favicons
      - user-avatars:/app/public/user-avatars
      - background-images:/app/public/background-images
      - attachments:/app/private/attachments
    ports:
      - 3000:1337
    environment:
      - BASE_URL=${PLANKA_BASE_URL:-https://boards.dsproject.pt}
      - DATABASE_URL=postgresql://postgres@postgres/planka
      - SECRET_KEY=notsecretkey
      - DEFAULT_ADMIN_EMAIL=admin@example.com
      - DEFAULT_ADMIN_PASSWORD=admin123
      - EMAIL_TEMPLATES_ENABLED=true
      - NODE_OPTIONS=--no-experimental-fetch
      - UNDICI_NO_FILE_API=1
      - GLOBAL_NOTIFICATION_SERVICES=[{"url":"mailto://boards%40bids.pt:U31dc6FeXqSUVE@mail.bids.pt:587/?from=boards%40bids.pt&to=andre%40bids.pt","format":"html"}]
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Aguardando PostgreSQL...' &&
        sleep 10 &&
        echo 'Verificando módulos nativos...' &&
        npm rebuild bcrypt lodepng --build-from-source --force || echo 'Módulos já compilados' &&
        echo 'Inicializando base de dados...' &&
        npm run db:init &&
        echo 'Iniciando Planka...' &&
        npm run start:prod
      "

  postgres:
    image: postgres:15-alpine
    restart: on-failure
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=planka
      - POSTGRES_USER=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  favicons:
  user-avatars:
  background-images:
  attachments:
  postgres:
